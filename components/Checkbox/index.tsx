import { InputHTMLAttributes, ReactNode, useId } from "react";
// Import necessary React hooks and types from React library.

import tw from "twin.macro";
// Import twin.macro for styling with Tailwind CSS.

export type CheckBoxProps = {
  children?: ReactNode;
} & InputHTMLAttributes<HTMLInputElement>;
// Define the prop types for the CheckBox component. It includes an optional 'children' prop and all attributes applicable to an HTML input element.

export default function CheckBox({ children, ...inputProps }: CheckBoxProps) {
  // Define the CheckBox component, accepting props according to the CheckBoxProps type.

  const id = useId();
  // Generate a unique ID using the useId hook for accessibility and proper element labeling.

  return (
    <div id="formInput">
      // Container div for the checkbox input and label.

      <label tw="flex gap-3 items-center" htmlFor={id}>
        // Label element styled with twin.macro to align items and create a gap between them. The htmlFor attribute links to the input using the unique ID.

        <input
          tw="cursor-pointer w-[min-content] checked:(text-black-100)"
          {...inputProps}
          // Apply any additional input props provided to the CheckBox component.

          type="checkbox"
          // Set the input type to 'checkbox'.

          id={id}
          // Set the input ID to the unique ID generated by useId.
        />
        {children}
        // Render any children passed to the CheckBox component inside the label.
      </label>
    </div>
  );
}